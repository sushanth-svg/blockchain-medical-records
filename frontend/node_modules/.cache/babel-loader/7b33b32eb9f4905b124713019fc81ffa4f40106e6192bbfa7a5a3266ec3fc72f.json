{"ast":null,"code":"var _jsxFileName = \"D:\\\\blockchain\\\\blockchain-medical-records\\\\frontend\\\\src\\\\components\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorDashboard = ({\n  web3,\n  accounts,\n  contract\n}) => {\n  _s();\n  const [patientAddress, setPatientAddress] = useState(\"\");\n  const [records, setRecords] = useState([]);\n\n  // Fetch patient records\n  const fetchRecords = async () => {\n    try {\n      const patientRecords = await contract.methods.getRecords(patientAddress).call({\n        from: accounts[0]\n      });\n      setRecords(patientRecords);\n    } catch (err) {\n      alert(\"Access denied or no records found.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doctor Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Patient's Address\",\n      value: patientAddress,\n      onChange: e => setPatientAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchRecords,\n      children: \"View Records\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient Records:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: records.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description: \", record.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"IPFS Hash: \", record.ipfsHash]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", new Date(record.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(DoctorDashboard, \"5CyIOj79Zaal2kxEQYWFeZCpDTw=\");\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DoctorDashboard","web3","accounts","contract","_s","patientAddress","setPatientAddress","records","setRecords","fetchRecords","patientRecords","methods","getRecords","call","from","err","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","record","index","description","ipfsHash","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["D:/blockchain/blockchain-medical-records/frontend/src/components/DoctorDashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst DoctorDashboard = ({ web3, accounts, contract }) => {\r\n    const [patientAddress, setPatientAddress] = useState(\"\");\r\n    const [records, setRecords] = useState([]);\r\n\r\n    // Fetch patient records\r\n    const fetchRecords = async () => {\r\n        try {\r\n            const patientRecords = await contract.methods.getRecords(patientAddress).call({ from: accounts[0] });\r\n            setRecords(patientRecords);\r\n        } catch (err) {\r\n            alert(\"Access denied or no records found.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Doctor Dashboard</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Patient's Address\"\r\n                value={patientAddress}\r\n                onChange={(e) => setPatientAddress(e.target.value)}\r\n            />\r\n            <button onClick={fetchRecords}>View Records</button>\r\n\r\n            <h2>Patient Records:</h2>\r\n            <ul>\r\n                {records.map((record, index) => (\r\n                    <li key={index}>\r\n                        <p>Description: {record.description}</p>\r\n                        <p>IPFS Hash: {record.ipfsHash}</p>\r\n                        <p>Date: {new Date(record.timestamp * 1000).toLocaleString()}</p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DoctorDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,cAAc,GAAG,MAAMP,QAAQ,CAACQ,OAAO,CAACC,UAAU,CAACP,cAAc,CAAC,CAACQ,IAAI,CAAC;QAAEC,IAAI,EAAEZ,QAAQ,CAAC,CAAC;MAAE,CAAC,CAAC;MACpGM,UAAU,CAACE,cAAc,CAAC;IAC9B,CAAC,CAAC,OAAOK,GAAG,EAAE;MACVC,KAAK,CAAC,oCAAoC,CAAC;IAC/C;EACJ,CAAC;EAED,oBACIjB,OAAA;IAAAkB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBtB,OAAA;MACIuB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BC,KAAK,EAAEnB,cAAe;MACtBoB,QAAQ,EAAGC,CAAC,IAAKpB,iBAAiB,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACFtB,OAAA;MAAQ6B,OAAO,EAAEnB,YAAa;MAAAQ,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEpDtB,OAAA;MAAAkB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBtB,OAAA;MAAAkB,QAAA,EACKV,OAAO,CAACsB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvBhC,OAAA;QAAAkB,QAAA,gBACIlB,OAAA;UAAAkB,QAAA,GAAG,eAAa,EAACa,MAAM,CAACE,WAAW;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxCtB,OAAA;UAAAkB,QAAA,GAAG,aAAW,EAACa,MAAM,CAACG,QAAQ;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnCtB,OAAA;UAAAkB,QAAA,GAAG,QAAM,EAAC,IAAIiB,IAAI,CAACJ,MAAM,CAACK,SAAS,GAAG,IAAI,CAAC,CAACC,cAAc,CAAC,CAAC;QAAA;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAH5DU,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACjB,EAAA,CArCIJ,eAAe;AAAAqC,EAAA,GAAfrC,eAAe;AAuCrB,eAAeA,eAAe;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}