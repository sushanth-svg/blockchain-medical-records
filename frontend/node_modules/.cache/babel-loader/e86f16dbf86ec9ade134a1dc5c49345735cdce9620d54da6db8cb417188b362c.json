{"ast":null,"code":"var _jsxFileName = \"D:\\\\blockchain\\\\blockchain-medical-records\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordsContract from \"./contracts/MedicalRecords.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      const web3Instance = new Web3(Web3.givenProvider || \"http://127.0.0.1:8545\");\n      const accounts = await web3Instance.eth.getAccounts();\n      const networkId = await web3Instance.eth.net.getId();\n      const deployedNetwork = MedicalRecordsContract.networks[networkId];\n      const MedicalRecordsAddress = \"0x033B3aF80Ba139511086448188eBF7BC10eA524f\"; // Your deployed contract address\n\n      const contractInstance = new web3Instance.eth.Contract(MedicalRecordsContract.abi, MedicalRecordsAddress, deployedNetwork && deployedNetwork.address);\n      setWeb3(web3Instance);\n      setAccounts(accounts);\n      setContract(contractInstance);\n    };\n    init();\n  }, []);\n  const addRecord = async () => {\n    const description = \"Blood Test Results\";\n    const ipfsHash = \"QmXvVS8MFqcmEJ8LrwPEF6cn4z2NEJAW3K8eBUin19GTEZ\"; // Replace with actual IPFS hash for a file\n    await contract.methods.addRecord(accounts[0], description, ipfsHash).send({\n      from: accounts[0]\n    });\n    alert(\"Record added!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blockchain Medical Records\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRecord,\n      children: \"Add Medical Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"9OrJUDMzjBkr/ZxN4dGoz/hY6LQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Web3","MedicalRecordsContract","jsxDEV","_jsxDEV","App","_s","web3","setWeb3","accounts","setAccounts","contract","setContract","init","web3Instance","givenProvider","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","MedicalRecordsAddress","contractInstance","Contract","abi","address","addRecord","description","ipfsHash","methods","send","from","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/blockchain/blockchain-medical-records/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport MedicalRecordsContract from \"./contracts/MedicalRecords.json\";\r\n\r\nfunction App() {\r\n    const [web3, setWeb3] = useState(null);\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            const web3Instance = new Web3(Web3.givenProvider || \"http://127.0.0.1:8545\");\r\n            const accounts = await web3Instance.eth.getAccounts();\r\n            const networkId = await web3Instance.eth.net.getId();\r\n            const deployedNetwork = MedicalRecordsContract.networks[networkId];\r\n            const MedicalRecordsAddress = \"0x033B3aF80Ba139511086448188eBF7BC10eA524f\"; // Your deployed contract address\r\n\r\n            const contractInstance = new web3Instance.eth.Contract(\r\n                MedicalRecordsContract.abi,MedicalRecordsAddress,\r\n                deployedNetwork && deployedNetwork.address\r\n            );\r\n\r\n            setWeb3(web3Instance);\r\n            setAccounts(accounts);\r\n            setContract(contractInstance);\r\n        };\r\n\r\n        init();\r\n    }, []);\r\n\r\n    const addRecord = async () => {\r\n        const description = \"Blood Test Results\";\r\n        const ipfsHash = \"QmXvVS8MFqcmEJ8LrwPEF6cn4z2NEJAW3K8eBUin19GTEZ\"; // Replace with actual IPFS hash for a file\r\n        await contract.methods.addRecord(accounts[0], description, ipfsHash).send({ from: accounts[0] });\r\n        alert(\"Record added!\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Blockchain Medical Records</h1>\r\n            <button onClick={addRecord}>Add Medical Record</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,sBAAsB,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACZ,MAAMc,IAAI,GAAG,MAAAA,CAAA,KAAY;MACrB,MAAMC,YAAY,GAAG,IAAIb,IAAI,CAACA,IAAI,CAACc,aAAa,IAAI,uBAAuB,CAAC;MAC5E,MAAMN,QAAQ,GAAG,MAAMK,YAAY,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC;MACrD,MAAMC,SAAS,GAAG,MAAMJ,YAAY,CAACE,GAAG,CAACG,GAAG,CAACC,KAAK,CAAC,CAAC;MACpD,MAAMC,eAAe,GAAGnB,sBAAsB,CAACoB,QAAQ,CAACJ,SAAS,CAAC;MAClE,MAAMK,qBAAqB,GAAG,4CAA4C,CAAC,CAAC;;MAE5E,MAAMC,gBAAgB,GAAG,IAAIV,YAAY,CAACE,GAAG,CAACS,QAAQ,CAClDvB,sBAAsB,CAACwB,GAAG,EAACH,qBAAqB,EAChDF,eAAe,IAAIA,eAAe,CAACM,OACvC,CAAC;MAEDnB,OAAO,CAACM,YAAY,CAAC;MACrBJ,WAAW,CAACD,QAAQ,CAAC;MACrBG,WAAW,CAACY,gBAAgB,CAAC;IACjC,CAAC;IAEDX,IAAI,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMC,WAAW,GAAG,oBAAoB;IACxC,MAAMC,QAAQ,GAAG,gDAAgD,CAAC,CAAC;IACnE,MAAMnB,QAAQ,CAACoB,OAAO,CAACH,SAAS,CAACnB,QAAQ,CAAC,CAAC,CAAC,EAAEoB,WAAW,EAAEC,QAAQ,CAAC,CAACE,IAAI,CAAC;MAAEC,IAAI,EAAExB,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;IAChGyB,KAAK,CAAC,eAAe,CAAC;EAC1B,CAAC;EAED,oBACI9B,OAAA;IAAA+B,QAAA,gBACI/B,OAAA;MAAA+B,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCnC,OAAA;MAAQoC,OAAO,EAAEZ,SAAU;MAAAO,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEd;AAACjC,EAAA,CAvCQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}